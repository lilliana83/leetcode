class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int sum=0;
        
        if(nums.size()<=0)  return 0;
        if(nums.size()==1){
            if(nums[0]==abs(S)){
                return 1;
            }
            else{
                return 0;
            }
        }
        int n = nums.size();
        for(int num:nums){
            sum+=num;
        }
        int dp[n][2*sum+1];
        for(int i=0;i<n;i++){
            for(int j =0;j<(2*sum+1);j++){
                dp[i][j]=0;
            }
        }
       dp[0][sum - nums[0]] += 1;
       dp[0][sum + nums[0]] += 1;
       for(int i = 1;i < n;i++){
           for(int j = 0;j < (2*sum+1);j++){
               if(dp[i - 1][j] > 0){
                   dp[i][j - nums[i]] += dp[i - 1][j];
                   dp[i][j + nums[i]] += dp[i - 1][j];
               }
           }
       }
       if(sum + S >= (2*sum+1)||sum + S < 0) return 0;
       return dp[n - 1][sum + S];
    }
};
